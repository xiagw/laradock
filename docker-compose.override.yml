version: '3.5'

services:

# docker tag laradock_php-fpm registry-intl.cn-hongkong.aliyuncs.com/9u/prod:php-fpm
# docker login
# docker push registry-intl.cn-hongkong.aliyuncs.com/9u/prod:php-fpm
# docker pull registry-intl.cn-hongkong.aliyuncs.com/9u/prod:php-fpm
# docker tag registry-intl.cn-hongkong.aliyuncs.com/9u/prod:php-fpm laradock_php-fpm
### PHP-FPM ##############################################
    php-fpm:
      restart: always
      build:
        context: ./php-fpm
        args:
          - TZ=${WORKSPACE_TIMEZONE}
          - LARADOCK_PHP_VERSION=${PHP_VERSION}
      environment:
        - TZ=${WORKSPACE_TIMEZONE}
      volumes:
        - ./php-fpm/php${PHP_VERSION}.ini:/etc/php/${PHP_VERSION}/fpm/php.ini
        - ./php-fpm/lsyncd:/etc/lsyncd
        - ${NGINX_SITES_PATH}:/nginx_sites
      extra_hosts:
        - "dockerhost:${DOCKER_HOST_IP}"
        - "api1.xxx.com:${DOCKER_HOST_IP}"
        - "dbhost:${DOCKER_HOST_IP}"
      networks:
        - backend
        - frontend

### NGINX Server #########################################
    nginx:
      restart: always
      build:
        context: ./nginx
        args:
          - TZ=${WORKSPACE_TIMEZONE}
      volumes:
        - ${NGINX_SSL_PATH}:/acmedata

### MySQL ################################################
    mysql:
      restart: always
      build:
        args:
          - TZ=${WORKSPACE_TIMEZONE}
          - MYSQL_ROOT_PASSWORD=${MYSQL_ROOT_PASSWORD}
      security_opt:
        - seccomp:unconfined
      environment:
        - TZ=${WORKSPACE_TIMEZONE}
      volumes:
        - ${DATA_PATH_HOST}/mysqlbak:/backup
      networks:
        - backend
        - frontend
      depends_on:
        - mysqlbak
        # - percona-xtrabackup

### MySQL backup ################################################
    mysqlbak:
      # restart: always
      # image: databack/mysql-backup
      build:
        context: ./mysqlbak
        args:
          - TZ=${WORKSPACE_TIMEZONE}
          - CHANGE_SOURCE=${CHANGE_SOURCE}
      environment:
        - DB_DUMP_FREQ=1440
        - DB_DUMP_BEGIN=1705
        - DB_DUMP_TARGET=/backup
        - DB_SERVER=${DB_HOST}
        - DB_PORT=3306
        - DB_USER=root
        - DB_PASS=${MYSQL_ROOT_PASSWORD}
        - DB_DUMP_BY_SCHEMA=true
        # - DB_DUMP_DEBUG=true
      volumes:
        - ${DATA_PATH_HOST}/mysqlbak:/backup
      networks:
        - backend
        - frontend

### Percona ################################################
    percona:
      restart: always
      build:
        args:
          - TZ=${WORKSPACE_TIMEZONE}
      volumes:
        - ${DATA_PATH_HOST}/percona_backup:/backup
      networks:
        - backend
        - frontend

### percona-xtrabackup ################################################
    percona-xtrabackup:
      build:
        context: ./percona-xtrabackup
        args:
          - MYSQL_VERSION=${MYSQL_VERSION}
          - MYSQL_ROOT_PASSWORD=${MYSQL_ROOT_PASSWORD}
      environment:
        - MYSQL_DATABASE=${MYSQL_DATABASE}
        - MYSQL_USER=${MYSQL_USER}
        - MYSQL_PASSWORD=${MYSQL_PASSWORD}
        - MYSQL_ROOT_PASSWORD=${MYSQL_ROOT_PASSWORD}
        - TZ=${WORKSPACE_TIMEZONE}
      volumes:
        - ${DATA_PATH_HOST}/mysql:/var/lib/mysql
        - ${DATA_PATH_HOST}/mysqlbak:/backup
      command: xtrabackup --backup --datadir=/var/lib/mysql/ --target-dir=/backup/xtrabackup --host=mysql --user=root --password=${MYSQL_ROOT_PASSWORD}
      # command: xtrabackup --backup --target-dir=/backup/inc1 --incremental-basedir=/backup/xtrabackup --host=mysql --user=root --password=${MYSQL_ROOT_PASSWORD}
      networks:
        - backend
        - frontend

### Redis nopass ################################################
    redis2:
      build:
        context: ./redis
      volumes:
        - ${DATA_PATH_HOST}/redis2:/data
      command: --databases ${REDIS_DATABASES:-256}
      ports:
        - "${REDIS_PORT2:-6380}:6379"
      networks:
        # - frontend
        - backend

### Redis PHP admin ################################################
    redisadmin:
      image: erikdubbelboer/phpredisadmin
      environment:
        - REDIS_1_HOST=${REDIS_HOST}
        - REDIS_1_PORT=${REDIS_PORT}
        - REDIS_1_AUTH=${REDIS_PASSWORD}
        - REDIS_2_HOST=${REDIS_HOST_2}
        - REDIS_2_PORT=${REDIS_PORT_2}
        - REDIS_2_AUTH=${REDIS_PASSWORD_2}
        - REDIS_3_HOST=${REDIS_HOST_3}
        - REDIS_3_PORT=${REDIS_PORT_3}
        - REDIS_3_AUTH=${REDIS_PASSWORD_3}
        - ADMIN_USER=${PHPREDISADMIN_USER:-admin}
        - ADMIN_PASS=${PHPREDISADMIN_PASS:-admin}
      ports:
        - "${PHPREDISADMIN_PORT}:80"
      networks:
        - backend
        - frontend

### gitlab ################################################
    gitlab:
      # container_name: gitlab
      ports:
        - "5050:5050"
      depends_on:
        - watchtower
      shm_size: '256m'
# gitlab-backup create SKIP=artifacts,repositories,registry,uploads,builds,pages,lfs,packages,terraform_state

### watchtower ################################################
    watchtower:
      image: containrrr/watchtower
      # container_name: watchtower
      restart: always
      # environment:
      #   WATCHTOWER_SCHEDULE: 0 05 05 * * *
      #   TZ: Asia/Shanghai
      #   WATCHTOWER_CLEANUP: "true"
      #   WATCHTOWER_DEBUG: "true"
      volumes:
        - /var/run/docker.sock:/var/run/docker.sock
        # - /home/ubuntu/.docker/config.json:/config.json
      ## schedule, 05 21 = 21:05 Asia/Shanghai, 05:05 UTC
      # command: --cleanup --schedule "0 05 21 * * *" laradock_gitlab_1 laradock_watchtower_1
      command: --cleanup --schedule "0 05 21 * * *"
      #command: --interval 300

### awvs ################################################
    awvs:
      image: secfa/docker-awvs
      ports:
        - "3443:3443"
      networks:
        - backend
        - frontend
      restart: always

### nexus ################################################
    nexus:
      image: sonatype/nexus3
      # restart: always
      hostname: ${NEXUS_DOMAIN}
      # container_name: nexus
      ports:
        - "${NEXUS_HTTP_PORT}:8081"
      volumes:
        - ${DATA_PATH_HOST}/nexus:/nexus-data
      networks:
        - backend
        - frontend
### acme.sh ################################################
    acme.sh:
      image: neilpang/acme.sh
      # container_name: acme
      command: daemon
      volumes:
        - ${DATA_PATH_HOST}/acmeout:/acme.sh
        - /var/run/docker.sock:/var/run/docker.sock
      environment:
        - DEPLOY_DOCKER_CONTAINER_LABEL=sh.acme.autoload.domain=${ACME_DOMAIN}
        - DEPLOY_DOCKER_CONTAINER_KEY_FILE=/etc/nginx/ssl/${ACME_DOMAIN}/key.key
        - DEPLOY_DOCKER_CONTAINER_CERT_FILE="/etc/nginx/ssl/${ACME_DOMAIN}/cert.crt"
        - DEPLOY_DOCKER_CONTAINER_CA_FILE="/etc/nginx/ssl/${ACME_DOMAIN}/ca.crt"
        - DEPLOY_DOCKER_CONTAINER_FULLCHAIN_FILE="/etc/nginx/ssl/${ACME_DOMAIN}/fullchain.crt"
        - DEPLOY_DOCKER_CONTAINER_RELOAD_CMD="service nginx force-reload"
        - DEPLOY_SSH_USER=ubuntu
        - DEPLOY_SSH_CMD=ssh
        - DEPLOY_SSH_SERVER=${DEPLOY_SSH_SERVER}
        - DEPLOY_SSH_KEYFILE=${DEPLOY_SSH_KEYFILE}
        - DEPLOY_SSH_CERTFILE=${DEPLOY_SSH_CERTFILE}
        - DEPLOY_SSH_CAFILE=${DEPLOY_SSH_CAFILE}
        - DEPLOY_SSH_FULLCHAIN=${DEPLOY_SSH_FULLCHAIN}
        # - DEPLOY_SSH_REMOTE_CMD=command to execute on remote host
        # - DEPLOY_SSH_BACKUP=yes or no
      networks:
        - backend
        - frontend

### geth-rinkeby ################################################
    geth-rinkeby:
      build:
        context: ./geth
      restart: always
      healthcheck:
        test: ["CMD", "geth", "--rinkeby", "attach", "-exec", "eth.syncing"]
      ports:
        - "8545:8545"
        - "30303:30303"
      ###########   sudo chown -R 1000:1000 ../../laradock-data/geth-data
      volumes:
        - ${DATA_PATH_HOST}/geth-rinkeby:/.ethereum
      command:
        - "--cache"
        - "2048"
        - "--syncmode"
        - "full"
        - "--rinkeby"
        - "--http"
        - "--http.port"
        - "8545"
        - "--http.addr"
        - "0.0.0.0"
        - "--http.api"
        - "txpool,eth,web3,admin,personal,net"
      networks:
        - frontend
        - backend

### geth ################################################
    geth:
      # image: ethereum/client-go
      build:
        context: ./geth
      restart: always
      healthcheck:
        test: ["CMD", "geth", "attach", "-exec", "eth.syncing"]
      ports:
        - "8545:8545"
        - "30303:30303"
      ###########   sudo chown -R 1000:1000 ../../laradock-data/geth-data
      volumes:
        - ${DATA_PATH_HOST}/geth:/.ethereum
      command:
        - "--cache"
        - "2048"
        - "--syncmode"
        - "fast"
        - "--networkid"
        - "1"
        - "--maxpeers"
        - "50"
        - "--http"
        - "--http.port"
        - "8545"
        - "--http.addr"
        - "0.0.0.0"
        - "--http.api"
        - "txpool,eth,web3,admin,personal,net"
      networks:
        - frontend
        - backend

### bitcoind ################################################
    bitcoind:
      # image: amacneil/bitcoin
      build:
        context: ./bitcoind
      restart: always
      # specify additional command line arguments here
      # command:
      #   - "--testnet"
      healthcheck:
        test: ["CMD", "bitcoin-cli", "-getinfo"]
      ports:
        # change to 18333 if running testnet
        - "8332:8332"
        - "8333:8333"
        - "8546:8545"
        - "18332:18332"
        - "18333:18333"
        - "18334:18334"
      volumes:
        - ${DATA_PATH_HOST}/bitcoind:/bitcoin

# 日志存储和解析
    loki:
      image: grafana/loki
      volumes:
        - ${DATA_PATH_HOST}/loki:/etc/loki
      # 修改loki默认配置文件路径
      # command: -config.file=/etc/loki/local-config.yml
      ports:
        - "3100:3100"
      networks:
        - backend
        - frontend
# 日志收集器
    promtail:
      image: grafana/promtail
      volumes:
        # 将需要收集的日志所在目录挂载到promtail容器中
        - ${DATA_PATH_HOST}/app/mall-tiny-loki/logs:/var/log
        - ./promtail:/etc/promtail
      # 修改promtail默认配置文件路径
      # command: -config.file=/etc/promtail/promtail.yml
      networks:
        - backend
        - frontend

##  git server: gogs
    gogs:
      image: gogs/gogs
      restart: always
      volumes:
        - ${DATA_PATH_HOST}/gogs:/data
      environment:
        - TZ=${WORKSPACE_TIMEZONE}
      ports:
        - "3022:22"
        - "3081:3000"
      networks:
        - backend
        - frontend
##  drone
    drone:
      image: drone/drone
      restart: always
      volumes:
        - ${DATA_PATH_HOST}/drone:/data
      environment:
        - TZ=${WORKSPACE_TIMEZONE}
        - DRONE_AGENTS_ENABLED=true
        - DRONE_GOGS_SERVER=http://gogs:3000
        - DRONE_RPC_SECRET=dronerpc666
        - DRONE_SERVER_HOST=192.168.3.10:3080
        - DRONE_SERVER_PROTO=http
        - DRONE_USER_CREATE=username:macro,admin:true
      ports:
        - "3080:80"
      networks:
        - backend
        - frontend
##  drone-runner
    drone-runner:
      image: drone/drone-runner-docker
      restart: always
      # container_name: drone-runner
      volumes:
        - /var/run/docker.sock:/var/run/docker.sock
        - ${DATA_PATH_HOST}/drone:/data
      environment:
        - TZ=${WORKSPACE_TIMEZONE}
        - DRONE_RPC_PROTO=http
        - DRONE_RPC_HOST=192.168.3.10:3080
        - DRONE_RPC_SECRET=dronerpc666
        - DRONE_RUNNER_CAPACITY=2
        - DRONE_RUNNER_NAME=drone-runner
      ports:
        - "3082:3000"
      networks:
        - backend
        - frontend

# git clone --depth 1 https://github.com/apache/apisix-docker.git ~/apisix-docker.git
# rsync -av ~/apisix-docker.git/example/ ~/laradock-data/apisix/
# mkdir -p ~/laradock-data/apisix/etcd_data/data
# chmod 700 ~/laradock-data/apisix/etcd_data/data
# chown -R 1000:1000 ~/laradock-data/apisix
## apisix
    apisix-dashboard:
      image: apache/apisix-dashboard:2.7
      restart: always
      volumes:
      - ${DATA_PATH_HOST}/apisix/dashboard_conf/conf.yaml:/usr/local/apisix-dashboard/conf/conf.yaml
      ports:
      - "9000:9000"
      networks:
        - backend
        - frontend

    apisix:
      image: apache/apisix:2.6-alpine
      restart: always
      volumes:
        - ${DATA_PATH_HOST}/apisix/apisix_log:/usr/local/apisix/logs
        - ${DATA_PATH_HOST}/apisix/apisix_conf/config.yaml:/usr/local/apisix/conf/config.yaml:ro
      depends_on:
        - etcd
      ##network_mode: host
      ports:
        - "${APISIX_HOST_HTTP_PORT}:9080/tcp"
        - "${APISIX_HOST_HTTPS_PORT}:9443/tcp"
      networks:
        - backend
        - frontend
## etcd
    etcd:
      image: bitnami/etcd:3
      user: root
      restart: always
      volumes:
        - ${DATA_PATH_HOST}/apisix/etcd_data:/bitnami/etcd
        # - ${DATA_PATH_HOST}/apisix/etcd_conf:/bitnami/etcd
      environment:
        ETCD_ENABLE_V2: "true"
        ALLOW_NONE_AUTHENTICATION: "yes"
        ETCD_ADVERTISE_CLIENT_URLS: "http://0.0.0.0:2379"
        ETCD_LISTEN_CLIENT_URLS: "http://0.0.0.0:2379"
      ports:
        - "2379:2379/tcp"
      networks:
        - backend
        - frontend

## showdoc
    showdoc:
      image: star7th/showdoc
      restart: always
      volumes:
        - ${DATA_PATH_HOST}/showdoc/html:/var/www/html
      ports:
        - "4999:80"
      networks:
        - backend
        - frontend

    wordpress:
      depends_on:
        - mysql
      image: wordpress:latest
      ports:
        - "8001:80"
      restart: always
      volumes:
        - ${DATA_PATH_HOST}/wordpress:/var/www/html
      environment:
        WORDPRESS_DB_HOST: mysql
        WORDPRESS_DB_USER: wordpress
        WORDPRESS_DB_PASSWORD: aephae4Ood
        WORDPRESS_DB_NAME: wordpress
      extra_hosts:
        - "dockerhost:${DOCKER_HOST_IP}"
      networks:
        - frontend
        - backend

    websvn:
      image: elleflorio/svn-server
      ports:
        - "8081:80"
        - "3690:3690"
      restart: always
      volumes:
        - ${DATA_PATH_HOST}/websvn:/home/svn
      networks:
        - frontend
        - backend

    usvn:
      # image: kempkensteffen/usvn
      build:
        context: ./usvn
        args:
          - CHANGE_SOURCE=${CHANGE_SOURCE}
          - TZ=${WORKSPACE_TIMEZONE}
      ports:
        - "8081:80"
        - "3690:3690"
      restart: always
      volumes:
        - ${DATA_PATH_HOST}/usvn/usvn:/var/www/usvn
        - ${DATA_PATH_HOST}/usvn/svncheckout:/var/www/svncheckout
        - ${DATA_PATH_HOST}/usvn/ssh:/root/.ssh
      networks:
        - frontend
        - backend

    zentao:
      image: hub.zentao.net/app/zentao
      # container_name: zentao
      # build:
        # context: ./zentao
      ports:
        - 8080:80
      volumes:
        - ${DATA_PATH_HOST}/zentao:/data
      # depends_on:
      #   - mysql
      environment:
        - ZT_MYSQL_HOST=${ZT_MYSQL_HOST}
        - ZT_MYSQL_PORT=${ZT_MYSQL_PORT}
        - ZT_MYSQL_USER=${ZT_MYSQL_USER}
        - ZT_MYSQL_PASSWORD=${ZT_MYSQL_PASSWORD}
        - ZT_MYSQL_DB=${ZT_MYSQL_DB}
        - PHP_MAX_EXECUTION_TIME=120
        - PHP_MEMORY_LIMIT=512M
        - PHP_POST_MAX_SIZE=1024M
        - PHP_UPLOAD_MAX_FILESIZE=1024M
        - LDAP_ENABLED=false
        - SMTP_ENABLED=false
        - APP_DEFAULT_PORT=80
        - APP_DOMAIN=${ZT_APP_DOMAIN}
        - PROTOCOL_TYPE=http
        - IS_CONTAINER=true
        - LINK_GIT=false
        - LINK_CI=false
      restart: always
      networks:
        - frontend
        - backend

    cas:
      image: apereo/cas
      build: ./cas
      ports:
        - 8445:8443
        - 8446:8080
      volumes:
        - ${DATA_PATH_HOST}/cas/thekeystore:/opt/cas/thekeystore
      restart: always
      networks:
        - frontend
        - backend

    spring:
      build:
        context: ./spring
        args:
          - CHANGE_SOURCE=${CHANGE_SOURCE}
          - JDK_IMAGE=${JDK_IMAGE}
          - JDK_VERSION=${JDK_VERSION}
      restart: always
      volumes:
        - ${APP_CODE_PATH_HOST}:${APP_CODE_PATH_CONTAINER}
        - ./spring:/app
      networks:
        - frontend
        - backend

    spring2:
      build:
        context: ./spring2
        args:
          - CHANGE_SOURCE=${CHANGE_SOURCE}
          - JDK_IMAGE=${JDK_IMAGE}
          - JDK_VERSION=${JDK_VERSION}
      restart: always
      volumes:
        - ${APP_CODE_PATH_HOST}:${APP_CODE_PATH_CONTAINER}
        - ./spring2:/app
      networks:
        - frontend
        - backend

    nodejs:
      build:
        context: ./nodejs
        args:
          - CHANGE_SOURCE=${CHANGE_SOURCE}
      restart: always
      volumes:
        - ${APP_CODE_PATH_HOST}:${APP_CODE_PATH_CONTAINER}
        - ./nodejs:/app
      networks:
        - frontend
        - backend

    xxljob:
      image: xuxueli/xxl-job-admin
      volumes:
        - /tmp:/data/applogs
      ports:
        - 8080:8080
      networks:
        - frontend
        - backend
      environment:
        PARAMS: "--spring.datasource.url=jdbc:mysql://127.0.0.1:3306/xxl_job?useUnicode=true&characterEncoding=UTF-8&autoReconnect=true&serverTimezone=Asia/Shanghai --spring.datasource.username=xxxxxx --spring.datasource.password=xxxxxx"

    piping:
      image: nwtgck/piping-server
      networks:
        - backend

    wechaty:
      image: wechaty/wechaty
      environment:
        WECHATY_PUPPET: wechaty-puppet-padlocal
        WECHATY_PUPPET_PADLOCAL_TOKEN: ${WECHATY_TOKEN}
        WECHATY_LOG: verbose
        WECHATY_PUPPET_SERVER_PORT: ${WECHATY_PUPPET_SERVER_PORT}
        WECHATY_TOKEN: ${WECHATY_TOKEN}
      # volumes:
        # - ${APP_CODE_PATH_HOST}:${APP_CODE_PATH_CONTAINER}
        # - /tmp:/data/applogs
      ports:
        - ${WECHATY_PUPPET_SERVER_PORT}:8788
      networks:
        - frontend
        - backend

    pandora:
      image: pengzhile/pandora
      restart: always
      environment:
        PANDORA_PROXY: ${HTTP_PROXY:-}
        PANDORA_SERVER: 0.0.0.0:8085
      volumes:
        - ${DATA_PATH_HOST}/pandora:/data
      ports:
        - ${PANDORA_PORT}:8085
      networks:
        - frontend
        - backend

## 蓝眼云盘
    tank:
      image: eyeblue/tank:3.1.6
      environment:
        PANDORA_SERVER: 0.0.0.0:8086
      volumes:
        - ${DATA_PATH_HOST}/tank:/data/build/matter
      ports:
        - ${TANK_PORT}:8086
      networks:
        - frontend
        - backend

## mayfly-go
    mayflygo:
      image: mayflygo/mayfly-go:v1.5.0
      environment:
        MAYFLY_DB_HOST: ${DB_HOST}
        MAYFLY_DB_NAME: ${MYSQL_DATABASE}
        MAYFLY_DB_USER: ${MYSQL_USER}
        MAYFLY_DB_PASS: ${MYSQL_PASSWORD}
        MAYFLY_AES_KEY: ${MAYFLY_AES_KEY}
        MAYFLY_JWT_KEY: ${MAYFLY_JWT_KEY}
      volumes:
        - ${DATA_PATH_HOST}/mayflygo:/mayfly
      ports:
        - ${MAYFLYGO_PORT}:8888
      networks:
        - frontend
        - backend

## bitwarden
    bitwarden:
      image: bitwardenrs/server
      volumes:
        - ${DATA_PATH_HOST}/bwdata:/data
      networks:
        - backend

## mouday/domain-admin
    domainadmin:
      image: mouday/domain-admin
      volumes:
        - ${DATA_PATH_HOST}/domainadmin/database:/app/database
        - ${DATA_PATH_HOST}/domainadmin/logs:/app/logs
      ports:
        - ${DOMAINADMIN_PORT}:8000
      networks:
        - frontend
        - backend

## ddns for aliyun
    ddns:
      image: sanjusss/aliyun-ddns
      environment:
        AKID: ${DDNS_AKID}
        AKSCT: ${DDNS_AKSCT}
        DOMAIN: ${DDNS_DOMAIN}
        REDO: 30
        TTL: 600
        TIMEZONE: 8.0
        TYPE: A,AAAA
      networks:
        - backend
